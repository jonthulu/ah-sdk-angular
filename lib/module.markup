{{if wrap}}(function(window, angular, undefined) {{{/if}}'use strict';

/**
 * @ngdoc module
 * @name {{moduleName}}
 * @module
 * @description
 *
 * The `{{moduleName}}` module provides services for interacting with
 * the actions exposed by the Actionhero server via the web API.
 */
var module = angular.module({{moduleName|q}}, ['ngResource'{{if addModuleDep.length}}{{addModuleDep}}, {{.|q}}{{/addModuleDep}}{{/if}}]);

module
  {{if skipUrlGen|falsy}}.constant('apiUrlBase', {{url|q}})
  {{/if}}.config(['$httpProvider', function ahServicesConfig($httpProvider) {
    $httpProvider.interceptors.push('ahAuthInterceptor');
    $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
  }])
  .factory('ahAuthInterceptor', ['ahAuth', '$q', '$rootScope',
    function ahInterceptorFactory(ahAuth, $q, $rootScope) {
      return {
        'request': function ahRequestInterceptor(config) {
          if (ahAuth.token) {
            config.headers.authorization = 'Bearer ' + ahAuth.token;
          }
          return config;
        },
        'responseError': function ahResponseErrorInterceptor(rejection) {
          if (rejection.status === 401) {
            $rootScope.$broadcast('ahAuth:Failed');
          }
          return $q.reject(rejection);
        }
      };
    }
  ])
  .factory('ahRouteHelper', function ahRouteHelperFactory() {
    /**
     * Combines an argument values array and an argument names array into an arguments object.
     *
     * @param {Array} args
     * @param {Array} argNames
     * @return {Object}
     */
    function combineArgs(args, argNames) {
      if (!argNames || !argNames.length) {
        return {};
      } else if (!args || !args.length) {
        return {};
      }

      var name, combined = {};
      for (var i = 0; i < args.length; i++) {
        name = argNames[i];
        combined[name] = args[i];
      }
      return combined;
    }

    /**
     * Parses :variables in the given url using the args as values
     * and argNames as the variable name.
     *
     * @param {string} url
     * @param {Object} args
     * @return {{doubleOpenBrace}}url: string, args: Object{{doubleCloseBrace}}
     */
    function parseRoute(url, args) {
      if (!args || typeof args !== 'object') {
        return { url: url, args: {} };
      }

      var remainingArgs = {};

      var name, reg, previous;
      for (name in args) {
        if (!args.hasOwnProperty(name)) {
          continue;
        }
        previous = url;
        reg      = new RegExp(':' + name, 'g');
        url      = url.replace(reg, args[name]);
        if (url === previous) {
          remainingArgs[name] = args[name];
        }
      }
      return {
        url:  url,
        args: remainingArgs
      };
    }

    /**
     * Builds the url used by $http caching.
     *
     * @param {string} url
     * @param {Object} params
     * @return {string}
     */
    function buildCacheUrl(url, params) {
      if (!params) {
        return url;
      }
      var parts = [];
      var i, v;
      forEachSorted(params, function (value, key) {
        if (value === null || typeof value === 'undefined') {
          return;
        }
        if (Object.prototype.toString.call(value) !== '[object Array]') {
          value = [value];
        }

        for (i = 0; i < value.length; i++) {
          v = value[i];
          if (v !== null && typeof v === 'object') {
            v = JSON.stringify(v);
          }
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));
        }
      });
      if (parts.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
      }
      return url;
    }

    function forEachSorted(obj, iterator, context) {
      var keys = [];
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          keys.push(key);
        }
      }
      keys = keys.sort();
      for (var i = 0; i < keys.length; i++) {
        iterator.call(context, obj[keys[i]], keys[i]);
      }
      return keys;
    }

    function encodeUriQuery(val) {
      return encodeURIComponent(val).
        replace(/%40/gi, '@').
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+');
    }

    return {
      combineArgs:   combineArgs,
      parseRoute:    parseRoute,
      buildCacheUrl: buildCacheUrl
    };
  }){{if skipHttpGen}};{{else}}
  .factory('ahHttp', [ '$http', function ahHttpFactory($http) {
    return function AHHttp(mainConfig, altConfig) {
      if (!altConfig || typeof altConfig !== 'object') {
        altConfig = {};
      }
      for (var i in mainConfig) {
        if (mainConfig.hasOwnProperty(i)) {
          altConfig[i] = mainConfig[i];
        }
      }

      return $http(altConfig).then(function (response) {
        return response.data;
      });
    };
  }]);{{/if}}
{{if single}}
{{files}}{{output}}{{if #|last|falsy}}
{{/if}}{{/files}}
{{/if}}{{if wrap}}})(window, window.angular);{{/if}}
