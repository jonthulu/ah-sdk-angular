{{if single|falsy}}{{if wrap}}(function(window, angular, undefined) {{{/if}}'use strict';
{{if wrap|nor>sdkSingleParam}}
{{if wrap|falsy}}/* jshint -W097 */{{/if}}
{{if sdkSingleParam|falsy}}/* jshint -W098 */{{/if}}
{{/if}}
{{/if}}/**
 * Generates the `{{name|lowercapcase}}` object for the Actionhero SDK.
 *
 * @ngdoc object
 * @name {{moduleName}}.{{name|lowercapcase}}
 * @object
 * @description An $http object for the `{{name}}` model.
 */
{{if single}}module{{else}}angular.module({{moduleName|q}}){{/if}}
  .factory({{name|lowercapcase|q}}, ['ahHttp', 'apiUrlBase', 'ahRouteHelper',
    function (ahHttp, apiUrlBase, ahRouteHelper) {
      {{actions}}/**
       * {{description}}
       *{{if sdkSingleParam|falsy}}{{inputs.required}}
       * @param {string|number} {{.}} Required.{{/inputs.required}}{{inputs.optional}}
       * @param {string|number=} {{.}} Optional.{{/inputs.optional}}{{else}}
       * @param {{doubleOpenBrace}}{{inputs.required}}{{.}}:*,{{/inputs.required}}{{inputs.optional}}{{.}}:*,{{/inputs.optional}}{{doubleCloseBrace}} args
       * @param {{openBrace}}object={{closeBrace}} config Optional $http config object.{{/if}}
       * @return {HttpPromise} A promise object with the standard then method.
       *                       Use promise.data for the response body.
       */
      function {{sdkName}}({{if sdkSingleParam}}args, config{{else}}{{params}}{{.}}{{if #|last|falsy}}, {{/if}}{{/params}}{{/if}}) {
        {{if sdkSingleParam|falsy}}var args;
        var config = null;
        if (arguments[0] && typeof arguments[0] === 'object') {
          args = arguments[0];
          if (arguments[1] && typeof arguments[1] === 'object') {
            config = arguments[1];
          }
        } else {
          args = ahRouteHelper.combineArgs(arguments, [{{if params}}
            {{params}}{{.|q}}{{if #|last|falsy}},
            {{/if}}{{/params}}
          {{/if}}]);
        }

        {{/if}}var parsed = ahRouteHelper.parseRoute({{route|q}}, args || {});

        return ahHttp({
          method:  {{verb|q}},
          url:     apiUrlBase + parsed.url,
          {{if verb|equals>get}}params:  parsed.args || null{{else}}data:    parsed.args || null{{/if}}
        }, config);
      }{{if #|last|falsy}}

      {{/if}}{{/actions}}

      /**
       * Gets the urls for each method.
       *
       * @return {Object} Object with keys as method names and values as the urls.
       */
      function getUrls() {
        return {{openBrace}}{{actions}}
          {{sdkName}}: apiUrlBase + {{route|q}}{{if #|last|falsy}},{{else}}
        {{/if}}{{/actions}}{{closeBrace}};
      }

      return {
        'getUrls': getUrls{{if actions|notempty}},{{/if}}
        {{actions}}{{sdkName|q}}: {{sdkName}}{{if #|last|falsy}},
        {{/if}}{{/actions}}
      };
    }
  ]);{{if single|falsy}}{{if wrap}}
})(window, window.angular);{{/if}}{{/if}}
