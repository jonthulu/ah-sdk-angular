0 info it worked if it ends with ok
1 verbose cli [ 'node', '/home/jon/.nvm/v0.10.31/bin/npm', 'publish', '.' ]
2 info using npm@2.1.7
3 info using node@v0.10.31
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/jon/code/js/ah-sdk-angular',
7 silly cache add   type: 'directory' }
8 verbose tar pack [ '/home/jon/.npm/ah-sdk-angular/0.0.8/package.tgz',
8 verbose tar pack   '/home/jon/code/js/ah-sdk-angular' ]
9 verbose tarball /home/jon/.npm/ah-sdk-angular/0.0.8/package.tgz
10 verbose folder /home/jon/code/js/ah-sdk-angular
11 info prepublish ah-sdk-angular@0.0.8
12 verbose addLocalTarball adding from inside cache /home/jon/.npm/ah-sdk-angular/0.0.8/package.tgz
13 silly cache afterAdd ah-sdk-angular@0.0.8
14 verbose afterAdd /home/jon/.npm/ah-sdk-angular/0.0.8/package/package.json not in flight; writing
15 verbose afterAdd /home/jon/.npm/ah-sdk-angular/0.0.8/package/package.json written
16 silly publish { name: 'ah-sdk-angular',
16 silly publish   description: 'Tool for auto-generating Angular $resource services for Actionhero',
16 silly publish   version: '0.0.8',
16 silly publish   homepage: 'https://github.com/jonthulu/ah-sdk-angular',
16 silly publish   main: './lib/generator',
16 silly publish   engines: { node: '>=0.10.0' },
16 silly publish   dependencies: { lodash: '2.4.x', 'markup-js': '1.5.x' },
16 silly publish   repository:
16 silly publish    { type: 'git',
16 silly publish      url: 'https://github.com/jonthulu/ah-sdk-angular.git' },
16 silly publish   readme: '# ah-sdk-angular\n\n> Tool for auto-generating Angular $http services for Actionhero\n\nThe services are generated based entirely on the actionhero routing. (See Generation Details below)\n\n## Getting Started\nThe included grunt task requires Grunt `~0.4.2`\n\n### Important!\nIt is required to update your settings under `config.servers.web.httpHeaders[\'Access-Control-Allow-Headers\']`\nto include `Authorization`:\n```js\n  {\n    ...\n    \'Access-Control-Allow-Headers\': \'Content-Type,Authorization\'\n  }\n```\n\nIt is recommended that you set `config.servers.web.simpleRouting` to `false` to avoid superfluous\nroute generation. It is not necessary though since methods are only generated from the routes config file.\n```js\n  {\n    ...\n    \'simpleRouting\': false,\n  }\n```\n\nBoth of these settings can be found in your actionhero/config/servers/web.js config file.\n\n### Install\nIf you haven\'t used [Grunt](http://gruntjs.com/) before,\nbe sure to check out the [Getting Started](http://gruntjs.com/getting-started)\nguide, as it explains how to create\na [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and\nuse Grunt plugins. Once you\'re familiar with that process, you may install\nthis plugin with this command:\n\n```shell\nnpm install ah-sdk-angular --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile\nwith these lines of JavaScript:\n\n```js\ngrunt.loadNpmTasks(\'ah-sdk-angular\');\ngrunt.config(\'actionheroSDKAngular\', {\n  options: {\n    output: \'DIRECTORY TO OUTPUT FILES\'\n    // Add extra options here.\n  }\n});\n```\n\n## Tasks and configuration\n\nTo run the grunt task\n```shell\ngrunt actionheroSDKAngular\n```\n\n### Options\nOptions available when generating the services file(s).\n\n#### output\nType: `string` *Required  \n\nThe path to the directory in which generate the file(s).\nIf serviceOutput is set, only the Angular module file will go here.\n\n#### serviceOutput\nType: `string|null` *Optional  \nDefault: `null`\n\nThe path to the directory in which to generate the Angular service/factory files.\nSkipped if singleFile is true.\n\n#### version\nType: `String` *Optional  \nDefault: `\'latest\'`\n\nThe action version to use (can be either \'latest\' or a number like 1.0 or 2.3).\nIf the given version cannot be found, the latest version is used.\n\n#### singleFile\nType: `Boolean` *Optional  \nDefault: `false`\n\nIf true, will generate a single file instead of one for each model.\n\n#### wrap\nType: `Boolean` *Optional  \nDefault: `false`\n\nIf true, each file will be wrapped in a javascript function wrapper.\n```js\n(function(window, angular, undefined) {\n  // GENERATED CODE HERE\n})(window, window.angular);\n```\n\n#### modelPrepend\nType: `String` *Optional  \nDefault: `null`\n\nA string that is prepended to each angular model name. If this option is set, the actual model\nwill be upperCamelCased instead of lowerCamelCased, though the overall name will still be lowerCamelCased.\nFor example: If set to \'sv\', an \'auth\' model will become \'svAuth\' instead of \'auth\'.\nThis option cannot be set to \'ah\' as this would cause conflicts with the other SDK services.\n\n#### tokenPrepend\nType: `String` *Optional  \nDefault: `null`\n\nA string that is prepended to your access token before it is sent for authentication.  \nFor example, if you are using the `passport-http-bearer` package, you will need to set\nthis to \'Bearer \'.\n\n#### filter.whitelist\nType: `Array.<string>` *Optional  \nDefault: `[]`\n\nA list of keywords that must be defined in the `sdkKeywords` option of the actionTemplate in order\nfor this action to be generated as a method in the model service.\nThe blacklist takes precedent over the whitelist.\n```js\n  filter: {\n    whitelist: [\'admin\']\n  }\n\n  // Will generate this action.\n  sdkKeywords: [\'admin\', \'expensive\']\n\n  // Will not generate this action.\n  sdkKeywords: [\'client\']\n```\n\n#### filter.blacklist\nType: `Array.<string>` *Optional  \nDefault: `[]`\n\nA list of keywords that CAN NOT be defined in the `sdkKeywords` option of the actionTemplate in order\nfor this action to be generated as a method in the model service.\nThe blacklist takes precedent over the whitelist.\n```js\n  filter: {\n    blacklist: [\'admin\']\n  }\n\n  // Will generate this action.\n  sdkKeywords: [\'client\', \'expensive\']\n\n  // Will not generate this action.\n  sdkKeywords: [\'client\', \'admin\']\n```\n\n#### moduleName\nType: `String` *Optional  \nDefault: `\'ahServices\'`\n\nThe name of the generated angular module.\n\n#### skipHttpGen\nType: `Boolean` *Optional  \nDefault: false\n\nIf true, the `ahHttp` factory service will not be generated but still be used. This allows (and requires)\nthe user to write their own angular $http factory wrapper to suit their needs. This factory must return a\nfunction that takes two config arguments and returns the results in whatever format you choose. The\nfirst config argument is the generated $http config options, the second config argument are the\noptional $http config options given by the user from the angular app.\n\n```js\n// Example of a custom ahHttp factory (same as the generated one).\nangular.module(\'myApp\').factory(\'ahHttp\', [ \'$http\', function ahHttpFactory($http) {\n    return function AHHttp(mainConfig, altConfig) {\n      if (!altConfig || typeof altConfig !== \'object\') {\n        altConfig = {};\n      }\n      for (var i in mainConfig) {\n        if (mainConfig.hasOwnProperty(i)) {\n          altConfig[i] = mainConfig[i];\n        }\n      }\n\n      return $http(altConfig).then(function (response) {\n        return response.data;\n      });\n    };\n  }]);\n```\n\n### Sending options to Grunt\nOptions format when calling grunt is `:output:version:singleFile:wrap`.\n```shell\ngrunt actionheroSDKAngular:/tmp:1.0:true:true\n```\nNote: These will override the options defined in the grunt config.\n\n## Generation Details\n\nThe tool scans the routes file and uses the paths to define models.\nThese models are defined using the first directory from the URL `path` param or a defined `sdkModel` param for each route.\nThe actions/methods defined for each model is taken from the second directory from the `path` param or a defined `sdkName` param.\nYou can also provide an optional `sdkRoute` param that mimics the `path` param but will be used instead of `path` (`sdkName` and `sdkModel` will still override this.)\n\nExample config/routes.js file:\n```js\n{\n  get:  [\n    // Auth Routes\n    { path: \'/auth/logout\', action: \'authLogout\', sdkName: \'logout\' },\n\n    // User Routes\n    { path: \'/users/getPrivateData/:id\', action: \'userGetPrivateData\' }\n  ],\n  post: [\n    // Auth Routes\n    { path: \'/auth/login\', action: \'authLogin\', sdkName: \'login\', sdkModel: \'auth\' },\n\n    // User Routes\n    { path: \'/users\', action: \'userCreate\', sdkName: \'create\' }\n  ]\n}\n```\nIn this example, 2 models will be created: Auth and Users.\nThe Auth model will contain a login and logout method.\nThe User model will contain a create and getPrivateData method.\n\nNote that the http verbs are preserved in the $http calls, so Auth.login will do a POST call and Auth.logout will do a GET call.\nAny routes under the `all` verb will be ignored when generating the sdk.\n\n(Note: If no `sdkName` is given and no second folder exists, such as with the userCreate action above,\nthen a name will be generated based on the verb. Get=>find, post=>create, put=>update, delete=>delete, patch=>patch.)\n\nThe parameters for the generated methods will come from the actionhero action file\'s inputs.required and inputs.optional settings.\n```js\n// If the authLogin action is defined as such.\nexports.authLogin = {\n  inputs: {\n    \'required\': [\'email\', \'password\'],\n    \'optional\': [\'ttl\']\n  }\n  ...\n};\n\n// A function declaration such as this is generated.\nfunction login(email, password, ttl) {\n  ...\n}\n```\n\nThese parameters can be given to the method as individual arguments or by sending an object as the first argument.\nIf the actionTemplate has the `sdkSingleParam` option set to true, then only the second example will be available.\n```js\nAuth.login(email, password);\nAuth.login({\'email\': email, \'password\': password);\n```\n\nEach function does a $http call and returns a simple `promise` with the returned data (the normal header and other info is stripped).\n```js\nAuth.login(email, password).then(function (data) {}, function (err) {});\n```\n\nA bonus method `getUrls` is generated for each model that returns an object with the url for each\naction. Be aware of any :params in each url that may need to be replaced. You can use `ahRouteHelper.parseRoute`\nto fill in these params if you like.\n```js\nangular.module(\'myApp\').controller(\'userController\', [\'Users\', \'ahRouteHelper\', function (Users, ahRouteHelper) {\n  var url = Users.getUrls().getPrivateData;            // Returns \'/users/getPrivateData/:id\'.\n  ahRouteHelper.parseRoute(url, {id: 32}).url; // Returns \'/users/getPrivateData/32\'.\n}\n```\n\n### Routes config options\n\nThese are options that can be set in the route definitions in your actionhero routes config file (actionhero/config/routes.js).\n\n#### sdkModel\nType: `string` *Optional  \nDefault: Parsed from the `path` or `sdkPath` param (/sdkModel/sdkName/other/routing/:id).\n\nThe model name to use when generating a service for this route.\n```js\n{ path: \'/anything/login\', action: \'authLogin\', sdkName: \'login\', sdkModel: \'auth\' }\n// Generates an Auth model.\n```\n\n#### sdkName\nType: `string` *Optional  \nDefault: Parsed from the `path` or `sdkPath` param (/sdkModel/sdkName/other/routing/:id).\n\nThe name to use when generating a method for this route.\n```js\n{ path: \'/auth/anything/:id\', action: \'authLogin\', sdkName: \'login\', sdkModel: \'auth\' }\n// Generates an Auth.login method.\n```\n\n#### sdkRoute\nType: `string` *Optional  \nDefault: `null`\n\nOverrides the `path` param when parsing the model and action names.\nThe `sdkModel` and `sdkName` options override anything parsed from this option.\n```js\n{ path: \'/something/anything/:id\', action: \'authLogin\', sdkRoute: \'/auth/login\' }\n// Generates an Auth.login method.\n```\n\n#### sdkKeywords\nType: `Array.<string>` *Optional  \nDefault: `null`\n\nAdds a keyword to this specific route instead of the action. This can be used to filter routes to\nan action based on the routing parameters.\n```js\n{ path: \'/something/anything\', action: \'createSomething\' }\n{ path: \'/something/anything/:adminParam\', action: \'createSomething\', sdkKeywords: [\'admin\'] }\n// Here is an example where the admin sdk will take a param for an action but the non-admin wont\n// for the same action.\n```\n\n### ActionTemplate options\n\nThese are options that can be set in the action template when you are defining your actionhero actions.\n\n#### sdkKeywords\nType: `{Array.<string>}` *Optional  \nDefault: `null`\n\nA list of keywords that can help define the action. These can be used to filter types of actions\nwhen generating the services.\n\n#### sdkSingleParam\nType: `boolean` *Optional  \nDefault: `false`\n\nIf true, the `inputs.required` and `inputs.optional` params will not be listed out as arguments of the method.\nInstead, only a single param will be available that accepts the key/value object of params.\n\n#### sdkClearCacheMethod\nType: `boolean` *Optional  \nDefault: `true` for get methods, `false` otherwise.\n\nGenerates a clear cache method for this action if true.\n\n## Using the generated services\n\n* Add the ahServices.js file (and any other generated files) to your Angular App.\n```html\n<script src="scripts/ahServices.js"></script>\n(other generated files here)\n```\n* Add ahServices as a dependency of your module.\n```js\nangular.module(\'myApp\', [\n  ...\n  \'ahServices\'\n]);\n```\n\n* Simply inject your new models into anywhere you need them.\n```js\nangular.module(\'myApp\').controller(\'authController\', [\'Auth\', \'ahAuth\', function (Auth, ahAuth) {\n  $scope.login = function () {\n    Auth.login({\'email\': email, \'password\': password}).then(function loginSuccess(user) {\n      ahAuth.login(user.token, user.id, $scope.rememberMe);\n      console.log(\'Login Success\', user);\n    }, function loginError(err) {\n      console.log(\'Login Error\', err);\n    });\n  };\n}]);\n```\n\n* Use the ahAuth service to track Authentication. When provided an access token and user id, all subsequent\n$http calls will have the Authentication header automatically set to your user access token.\n```\nangular.module(\'myApp\').controller(\'testController\', [\'ahAuth\', \'Users\', function (ahAuth, Users) {\n  var someToken  = \'1234\';\n  var someUserId = 1;\n  // This would have happened in the login, not in the same controller...\n  ahAuth.login(someToken, someUserId, true);\n\n  // We better have \'id\' in our inputs.required in the userGetPrivateData action.\n  Users.getPrivateData({id: ahAuth.getUserId()}).then(function (myPrivateData) {\n    console.log(myPrivateData);\n  });\n\n  // This will do a $http GET call to \'/users/getPrivateData/1\' with \'Authentication: 1234\' in the headers.\n}]);\n```\n\nNote: You will have to generate your own accessTokens, I use the uid2 package available through npm.\n```shell\nnpm install uid2 --save\n```\n\n* When you logout the user, call ahAuth.logout() to clear the current session.\n```js\nAuth.logout(function logoutSuccess() {\n  ahAuth.logout();\n});\n```\n\n* To override the angular $http config options when calling the SDK, send the first argument as\nan object of parameters and the second argument as an object of config options. Note that any\noptions that are explicitly set by the SDK call (method, url, etc) cannot be overridden.\n```js\nUsers.getPrivateData({\n  id: 1\n}, {\n  cache: true\n}).then(...);\n```\n\n* To override the angular $http config defaults for all SDK calls, use angular.module(...).run() or .config().\n```js\nangular.module(\'myApp\').config([\'$httpProvider\', function ($httpProvider) {\n  $httpProvider.defaults.xsrfCookieName  = \'ahXSRF\';\n  $httpProvider.defaults.withCredentials = true;\n}]);\n/* OR */\nangular.module(\'myApp\').run([\'$http\', function ($http) {\n  $http.defaults.xsrfCookieName  = \'ahXSRF\';\n  $http.defaults.withCredentials = true;\n}]);\n```\n\n* Check the docblocks in the generated code for more help if you need it.\n',
16 silly publish   readmeFilename: 'README.md',
16 silly publish   gitHead: '74fb3d108016b167117da691d2d29f9b7130f11f',
16 silly publish   bugs: { url: 'https://github.com/jonthulu/ah-sdk-angular/issues' },
16 silly publish   _id: 'ah-sdk-angular@0.0.8',
16 silly publish   scripts: {},
16 silly publish   _shasum: 'b2391debd94575be803a1e8005adca66c9eb9a7a',
16 silly publish   _from: '.' }
17 silly mapToRegistry name ah-sdk-angular
18 silly mapToRegistry using default registry
19 silly mapToRegistry registry https://registry.npmjs.org/
20 silly mapToRegistry uri https://registry.npmjs.org/ah-sdk-angular
21 verbose publish registryBase https://registry.npmjs.org/
22 silly publish uploading /home/jon/.npm/ah-sdk-angular/0.0.8/package.tgz
23 verbose request uri https://registry.npmjs.org/ah-sdk-angular
24 verbose request sending authorization for write operation
25 info attempt registry request try #1 at 18:28:05
26 verbose request id 1611dade30b2821d
27 http request PUT https://registry.npmjs.org/ah-sdk-angular
28 http 403 https://registry.npmjs.org/ah-sdk-angular
29 verbose headers { date: 'Tue, 11 Nov 2014 00:28:17 GMT',
29 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
29 verbose headers   'content-type': 'application/json',
29 verbose headers   'cache-control': 'max-age=60',
29 verbose headers   'content-length': '18698',
29 verbose headers   'accept-ranges': 'bytes',
29 verbose headers   via: '1.1 varnish',
29 verbose headers   'x-served-by': 'cache-dfw1824-DFW',
29 verbose headers   'x-cache': 'MISS',
29 verbose headers   'x-cache-hits': '0',
29 verbose headers   'x-timer': 'S1415665697.686347,VS0,VE275',
29 verbose headers   'keep-alive': 'timeout=10, max=50',
29 verbose headers   connection: 'Keep-Alive' }
30 verbose request invalidating /home/jon/.npm/registry.npmjs.org/ah-sdk-angular on PUT
31 error publish Failed PUT 403
32 verbose stack Error: forbidden cannot modify pre-existing version: 0.0.8
32 verbose stack old={"name":"ah-sdk-angular","description":"Tool for auto-generating Angular $resource services for Actionhero","version":"0.0.8","homepage":"https://github.com/jonthulu/ah-sdk-angular","main":"./lib/generator","engines":{"node":">=0.10.0"},"dependencies":{"lodash":"2.4.x","markup-js":"1.5.x"},"repository":{"type":"git","url":"https://github.com/jonthulu/ah-sdk-angular.git"},"gitHead":"9695404a78461b59ae2f34afd795fbd7dbb4b019","bugs":{"url":"https://github.com/jonthulu/ah-sdk-angular/issues"},"_id":"ah-sdk-angular@0.0.8","scripts":{},"_shasum":"d3385048fbfad0f8fe60c29f7da574920fb68f88","_from":".","_npmVersion":"2.1.7","_nodeVersion":"0.10.31","_npmUser":{"name":"jonthulu","email":"epoque@cox.net"},"maintainers":[{"name":"jonthulu","email":"epoque@cox.net"}],"dist":{"shasum":"d3385048fbfad0f8fe60c29f7da574920fb68f88","tarball":"http://registry.npmjs.org/ah-sdk-angular/-/ah-sdk-angular-0.0.8.tgz"}}
32 verbose stack new={"name":"ah-sdk-angular","description":"Tool for auto-generating Angular $resource services for Actionhero","version":"0.0.8","homepage":"https://github.com/jonthulu/ah-sdk-angular","main":"./lib/generator","engines":{"node":">=0.10.0"},"dependencies":{"lodash":"2.4.x","markup-js":"1.5.x"},"repository":{"type":"git","url":"https://github.com/jonthulu/ah-sdk-angular.git"},"readme":"# ah-sdk-angular\u000a\u000a> Tool for auto-generating Angular $http services for Actionhero\u000a\u000aThe services are generated based entirely on the actionhero routing. (See Generation Details below)\u000a\u000a## Getting Started\u000aThe included grunt task requires Grunt `~0.4.2`\u000a\u000a### Important!\u000aIt is required to update your settings under `config.servers.web.httpHeaders['Access-Control-Allow-Headers']`\u000ato include `Authorization`:\u000a```js\u000a  {\u000a    ...\u000a    'Access-Control-Allow-Headers': 'Content-Type,Authorization'\u000a  }\u000a```\u000a\u000aIt is recommended that you set `config.servers.web.simpleRouting` to `false` to avoid superfluous\u000aroute generation. It is not necessary though since methods are only generated from the routes config file.\u000a```js\u000a  {\u000a    ...\u000a    'simpleRouting': false,\u000a  }\u000a```\u000a\u000aBoth of these settings can be found in your actionhero/config/servers/web.js config file.\u000a\u000a### Install\u000aIf you haven't used [Grunt](http://gruntjs.com/) before,\u000abe sure to check out the [Getting Started](http://gruntjs.com/getting-started)\u000aguide, as it explains how to create\u000aa [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and\u000ause Grunt plugins. Once you're familiar with that process, you may install\u000athis plugin with this command:\u000a\u000a```shell\u000anpm install ah-sdk-angular --save-dev\u000a```\u000a\u000aOnce the plugin has been installed, it may be enabled inside your Gruntfile\u000awith these lines of JavaScript:\u000a\u000a```js\u000agrunt.loadNpmTasks('ah-sdk-angular');\u000agrunt.config('actionheroSDKAngular', {\u000a  options: {\u000a    output: 'DIRECTORY TO OUTPUT FILES'\u000a    // Add extra options here.\u000a  }\u000a});\u000a```\u000a\u000a## Tasks and configuration\u000a\u000aTo run the grunt task\u000a```shell\u000agrunt actionheroSDKAngular\u000a```\u000a\u000a### Options\u000aOptions available when generating the services file(s).\u000a\u000a#### output\u000aType: `string` *Required  \u000a\u000aThe path to the directory in which generate the file(s).\u000aIf serviceOutput is set, only the Angular module file will go here.\u000a\u000a#### serviceOutput\u000aType: `string|null` *Optional  \u000aDefault: `null`\u000a\u000aThe path to the directory in which to generate the Angular service/factory files.\u000aSkipped if singleFile is true.\u000a\u000a#### version\u000aType: `String` *Optional  \u000aDefault: `'latest'`\u000a\u000aThe action version to use (can be either 'latest' or a number like 1.0 or 2.3).\u000aIf the given version cannot be found, the latest version is used.\u000a\u000a#### singleFile\u000aType: `Boolean` *Optional  \u000aDefault: `false`\u000a\u000aIf true, will generate a single file instead of one for each model.\u000a\u000a#### wrap\u000aType: `Boolean` *Optional  \u000aDefault: `false`\u000a\u000aIf true, each file will be wrapped in a javascript function wrapper.\u000a```js\u000a(function(window, angular, undefined) {\u000a  // GENERATED CODE HERE\u000a})(window, window.angular);\u000a```\u000a\u000a#### modelPrepend\u000aType: `String` *Optional  \u000aDefault: `null`\u000a\u000aA string that is prepended to each angular model name. If this option is set, the actual model\u000awill be upperCamelCased instead of lowerCamelCased, though the overall name will still be lowerCamelCased.\u000aFor example: If set to 'sv', an 'auth' model will become 'svAuth' instead of 'auth'.\u000aThis option cannot be set to 'ah' as this would cause conflicts with the other SDK services.\u000a\u000a#### tokenPrepend\u000aType: `String` *Optional  \u000aDefault: `null`\u000a\u000aA string that is prepended to your access token before it is sent for authentication.  \u000aFor example, if you are using the `passport-http-bearer` package, you will need to set\u000athis to 'Bearer '.\u000a\u000a#### filter.whitelist\u000aType: `Array.<string>` *Optional  \u000aDefault: `[]`\u000a\u000aA list of keywords that must be defined in the `sdkKeywords` option of the actionTemplate in order\u000afor this action to be generated as a method in the model service.\u000aThe blacklist takes precedent over the whitelist.\u000a```js\u000a  filter: {\u000a    whitelist: ['admin']\u000a  }\u000a\u000a  // Will generate this action.\u000a  sdkKeywords: ['admin', 'expensive']\u000a\u000a  // Will not generate this action.\u000a  sdkKeywords: ['client']\u000a```\u000a\u000a#### filter.blacklist\u000aType: `Array.<string>` *Optional  \u000aDefault: `[]`\u000a\u000aA list of keywords that CAN NOT be defined in the `sdkKeywords` option of the actionTemplate in order\u000afor this action to be generated as a method in the model service.\u000aThe blacklist takes precedent over the whitelist.\u000a```js\u000a  filter: {\u000a    blacklist: ['admin']\u000a  }\u000a\u000a  // Will generate this action.\u000a  sdkKeywords: ['client', 'expensive']\u000a\u000a  // Will not generate this action.\u000a  sdkKeywords: ['client', 'admin']\u000a```\u000a\u000a#### moduleName\u000aType: `String` *Optional  \u000aDefault: `'ahServices'`\u000a\u000aThe name of the generated angular module.\u000a\u000a#### skipHttpGen\u000aType: `Boolean` *Optional  \u000aDefault: false\u000a\u000aIf true, the `ahHttp` factory service will not be generated but still be used. This allows (and requires)\u000athe user to write their own angular $http factory wrapper to suit their needs. This factory must return a\u000afunction that takes two config arguments and returns the results in whatever format you choose. The\u000afirst config argument is the generated $http config options, the second config argument are the\u000aoptional $http config options given by the user from the angular app.\u000a\u000a```js\u000a// Example of a custom ahHttp factory (same as the generated one).\u000aangular.module('myApp').factory('ahHttp', [ '$http', function ahHttpFactory($http) {\u000a    return function AHHttp(mainConfig, altConfig) {\u000a      if (!altConfig || typeof altConfig !== 'object') {\u000a        altConfig = {};\u000a      }\u000a      for (var i in mainConfig) {\u000a        if (mainConfig.hasOwnProperty(i)) {\u000a          altConfig[i] = mainConfig[i];\u000a        }\u000a      }\u000a\u000a      return $http(altConfig).then(function (response) {\u000a        return response.data;\u000a      });\u000a    };\u000a  }]);\u000a```\u000a\u000a### Sending options to Grunt\u000aOptions format when calling grunt is `:output:version:singleFile:wrap`.\u000a```shell\u000agrunt actionheroSDKAngular:/tmp:1.0:true:true\u000a```\u000aNote: These will override the options defined in the grunt config.\u000a\u000a## Generation Details\u000a\u000aThe tool scans the routes file and uses the paths to define models.\u000aThese models are defined using the first directory from the URL `path` param or a defined `sdkModel` param for each route.\u000aThe actions/methods defined for each model is taken from the second directory from the `path` param or a defined `sdkName` param.\u000aYou can also provide an optional `sdkRoute` param that mimics the `path` param but will be used instead of `path` (`sdkName` and `sdkModel` will still override this.)\u000a\u000aExample config/routes.js file:\u000a```js\u000a{\u000a  get:  [\u000a    // Auth Routes\u000a    { path: '/auth/logout', action: 'authLogout', sdkName: 'logout' },\u000a\u000a    // User Routes\u000a    { path: '/users/getPrivateData/:id', action: 'userGetPrivateData' }\u000a  ],\u000a  post: [\u000a    // Auth Routes\u000a    { path: '/auth/login', action: 'authLogin', sdkName: 'login', sdkModel: 'auth' },\u000a\u000a    // User Routes\u000a    { path: '/users', action: 'userCreate', sdkName: 'create' }\u000a  ]\u000a}\u000a```\u000aIn this example, 2 models will be created: Auth and Users.\u000aThe Auth model will contain a login and logout method.\u000aThe User model will contain a create and getPrivateData method.\u000a\u000aNote that the http verbs are preserved in the $http calls, so Auth.login will do a POST call and Auth.logout will do a GET call.\u000aAny routes under the `all` verb will be ignored when generating the sdk.\u000a\u000a(Note: If no `sdkName` is given and no second folder exists, such as with the userCreate action above,\u000athen a name will be generated based on the verb. Get=>find, post=>create, put=>update, delete=>delete, patch=>patch.)\u000a\u000aThe parameters for the generated methods will come from the actionhero action file's inputs.required and inputs.optional settings.\u000a```js\u000a// If the authLogin action is defined as such.\u000aexports.authLogin = {\u000a  inputs: {\u000a    'required': ['email', 'password'],\u000a    'optional': ['ttl']\u000a  }\u000a  ...\u000a};\u000a\u000a// A function declaration such as this is generated.\u000afunction login(email, password, ttl) {\u000a  ...\u000a}\u000a```\u000a\u000aThese parameters can be given to the method as individual arguments or by sending an object as the first argument.\u000aIf the actionTemplate has the `sdkSingleParam` option set to true, then only the second example will be available.\u000a```js\u000aAuth.login(email, password);\u000aAuth.login({'email': email, 'password': password);\u000a```\u000a\u000aEach function does a $http call and returns a simple `promise` with the returned data (the normal header and other info is stripped).\u000a```js\u000aAuth.login(email, password).then(function (data) {}, function (err) {});\u000a```\u000a\u000aA bonus method `getUrls` is generated for each model that returns an object with the url for each\u000aaction. Be aware of any :params in each url that may need to be replaced. You can use `ahRouteHelper.parseRoute`\u000ato fill in these params if you like.\u000a```js\u000aangular.module('myApp').controller('userController', ['Users', 'ahRouteHelper', function (Users, ahRouteHelper) {\u000a  var url = Users.getUrls().getPrivateData;            // Returns '/users/getPrivateData/:id'.\u000a  ahRouteHelper.parseRoute(url, {id: 32}).url; // Returns '/users/getPrivateData/32'.\u000a}\u000a```\u000a\u000a### Routes config options\u000a\u000aThese are options that can be set in the route definitions in your actionhero routes config file (actionhero/config/routes.js).\u000a\u000a#### sdkModel\u000aType: `string` *Optional  \u000aDefault: Parsed from the `path` or `sdkPath` param (/sdkModel/sdkName/other/routing/:id).\u000a\u000aThe model name to use when generating a service for this route.\u000a```js\u000a{ path: '/anything/login', action: 'authLogin', sdkName: 'login', sdkModel: 'auth' }\u000a// Generates an Auth model.\u000a```\u000a\u000a#### sdkName\u000aType: `string` *Optional  \u000aDefault: Parsed from the `path` or `sdkPath` param (/sdkModel/sdkName/other/routing/:id).\u000a\u000aThe name to use when generating a method for this route.\u000a```js\u000a{ path: '/auth/anything/:id', action: 'authLogin', sdkName: 'login', sdkModel: 'auth' }\u000a// Generates an Auth.login method.\u000a```\u000a\u000a#### sdkRoute\u000aType: `string` *Optional  \u000aDefault: `null`\u000a\u000aOverrides the `path` param when parsing the model and action names.\u000aThe `sdkModel` and `sdkName` options override anything parsed from this option.\u000a```js\u000a{ path: '/something/anything/:id', action: 'authLogin', sdkRoute: '/auth/login' }\u000a// Generates an Auth.login method.\u000a```\u000a\u000a#### sdkKeywords\u000aType: `Array.<string>` *Optional  \u000aDefault: `null`\u000a\u000aAdds a keyword to this specific route instead of the action. This can be used to filter routes to\u000aan action based on the routing parameters.\u000a```js\u000a{ path: '/something/anything', action: 'createSomething' }\u000a{ path: '/something/anything/:adminParam', action: 'createSomething', sdkKeywords: ['admin'] }\u000a// Here is an example where the admin sdk will take a param for an action but the non-admin wont\u000a// for the same action.\u000a```\u000a\u000a### ActionTemplate options\u000a\u000aThese are options that can be set in the action template when you are defining your actionhero actions.\u000a\u000a#### sdkKeywords\u000aType: `{Array.<string>}` *Optional  \u000aDefault: `null`\u000a\u000aA list of keywords that can help define the action. These can be used to filter types of actions\u000awhen generating the services.\u000a\u000a#### sdkSingleParam\u000aType: `boolean` *Optional  \u000aDefault: `false`\u000a\u000aIf true, the `inputs.required` and `inputs.optional` params will not be listed out as arguments of the method.\u000aInstead, only a single param will be available that accepts the key/value object of params.\u000a\u000a#### sdkClearCacheMethod\u000aType: `boolean` *Optional  \u000aDefault: `true` for get methods, `false` otherwise.\u000a\u000aGenerates a clear cache method for this action if true.\u000a\u000a## Using the generated services\u000a\u000a* Add the ahServices.js file (and any other generated files) to your Angular App.\u000a```html\u000a<script src=\"scripts/ahServices.js\"></script>\u000a(other generated files here)\u000a```\u000a* Add ahServices as a dependency of your module.\u000a```js\u000aangular.module('myApp', [\u000a  ...\u000a  'ahServices'\u000a]);\u000a```\u000a\u000a* Simply inject your new models into anywhere you need them.\u000a```js\u000aangular.module('myApp').controller('authController', ['Auth', 'ahAuth', function (Auth, ahAuth) {\u000a  $scope.login = function () {\u000a    Auth.login({'email': email, 'password': password}).then(function loginSuccess(user) {\u000a      ahAuth.login(user.token, user.id, $scope.rememberMe);\u000a      console.log('Login Success', user);\u000a    }, function loginError(err) {\u000a      console.log('Login Error', err);\u000a    });\u000a  };\u000a}]);\u000a```\u000a\u000a* Use the ahAuth service to track Authentication. When provided an access token and user id, all subsequent\u000a$http calls will have the Authentication header automatically set to your user access token.\u000a```\u000aangular.module('myApp').controller('testController', ['ahAuth', 'Users', function (ahAuth, Users) {\u000a  var someToken  = '1234';\u000a  var someUserId = 1;\u000a  // This would have happened in the login, not in the same controller...\u000a  ahAuth.login(someToken, someUserId, true);\u000a\u000a  // We better have 'id' in our inputs.required in the userGetPrivateData action.\u000a  Users.getPrivateData({id: ahAuth.getUserId()}).then(function (myPrivateData) {\u000a    console.log(myPrivateData);\u000a  });\u000a\u000a  // This will do a $http GET call to '/users/getPrivateData/1' with 'Authentication: 1234' in the headers.\u000a}]);\u000a```\u000a\u000aNote: You will have to generate your own accessTokens, I use the uid2 package available through npm.\u000a```shell\u000anpm install uid2 --save\u000a```\u000a\u000a* When you logout the user, call ahAuth.logout() to clear the current session.\u000a```js\u000aAuth.logout(function logoutSuccess() {\u000a  ahAuth.logout();\u000a});\u000a```\u000a\u000a* To override the angular $http config options when calling the SDK, send the first argument as\u000aan object of parameters and the second argument as an object of config options. Note that any\u000aoptions that are explicitly set by the SDK call (method, url, etc) cannot be overridden.\u000a```js\u000aUsers.getPrivateData({\u000a  id: 1\u000a}, {\u000a  cache: true\u000a}).then(...);\u000a```\u000a\u000a* To override the angular $http config defaults for all SDK calls, use angular.module(...).run() or .config().\u000a```js\u000aangular.module('myApp').config(['$httpProvider', function ($httpProvider) {\u000a  $httpProvider.defaults.xsrfCookieName  = 'ahXSRF';\u000a  $httpProvider.defaults.withCredentials = true;\u000a}]);\u000a/* OR */\u000aangular.module('myApp').run(['$http', function ($http) {\u000a  $http.defaults.xsrfCookieName  = 'ahXSRF';\u000a  $http.defaults.withCredentials = true;\u000a}]);\u000a```\u000a\u000a* Check the docblocks in the generated code for more help if you need it.\u000a","readmeFilename":"README.md","gitHead":"74fb3d108016b167117da691d2d29f9b7130f11f","bugs":{"url":"https://github.com/jonthulu/ah-sdk-angular/issues"},"_id":"ah-sdk-angular@0.0.8","scripts":{},"_shasum":"b2391debd94575be803a1e8005adca66c9eb9a7a","_from":".","_npmVersion":"2.1.7","_nodeVersion":"0.10.31","_npmUser":{"name":"jonthulu","email":"epoque@cox.net"},"maintainers":[{"name":"jonthulu","email":"epoque@cox.net"}],"dist":{"shasum":"b2391debd94575be803a1e8005adca66c9eb9a7a","tarball":"http://registry.npmjs.org/ah-sdk-angular/-/ah-sdk-angular-0.0.8.tgz"}}: ah-sdk-angular
32 verbose stack     at CachingRegistryClient.<anonymous> (/home/jon/.nvm/v0.10.31/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:234:14)
32 verbose stack     at Request._callback (/home/jon/.nvm/v0.10.31/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
32 verbose stack     at Request.self.callback (/home/jon/.nvm/v0.10.31/lib/node_modules/npm/node_modules/request/request.js:372:22)
32 verbose stack     at Request.emit (events.js:98:17)
32 verbose stack     at Request.<anonymous> (/home/jon/.nvm/v0.10.31/lib/node_modules/npm/node_modules/request/request.js:1310:14)
32 verbose stack     at Request.emit (events.js:117:20)
32 verbose stack     at IncomingMessage.<anonymous> (/home/jon/.nvm/v0.10.31/lib/node_modules/npm/node_modules/request/request.js:1258:12)
32 verbose stack     at IncomingMessage.emit (events.js:117:20)
32 verbose stack     at _stream_readable.js:943:16
32 verbose stack     at process._tickCallback (node.js:419:13)
33 verbose statusCode 403
34 verbose pkgid ah-sdk-angular
35 verbose cwd /home/jon/code/js/ah-sdk-angular
36 error Linux 3.13.0-24-generic
37 error argv "node" "/home/jon/.nvm/v0.10.31/bin/npm" "publish" "."
38 error node v0.10.31
39 error npm  v2.1.7
40 error code E403
41 error forbidden cannot modify pre-existing version: 0.0.8
41 error old={"name":"ah-sdk-angular","description":"Tool for auto-generating Angular $resource services for Actionhero","version":"0.0.8","homepage":"https://github.com/jonthulu/ah-sdk-angular","main":"./lib/generator","engines":{"node":">=0.10.0"},"dependencies":{"lodash":"2.4.x","markup-js":"1.5.x"},"repository":{"type":"git","url":"https://github.com/jonthulu/ah-sdk-angular.git"},"gitHead":"9695404a78461b59ae2f34afd795fbd7dbb4b019","bugs":{"url":"https://github.com/jonthulu/ah-sdk-angular/issues"},"_id":"ah-sdk-angular@0.0.8","scripts":{},"_shasum":"d3385048fbfad0f8fe60c29f7da574920fb68f88","_from":".","_npmVersion":"2.1.7","_nodeVersion":"0.10.31","_npmUser":{"name":"jonthulu","email":"epoque@cox.net"},"maintainers":[{"name":"jonthulu","email":"epoque@cox.net"}],"dist":{"shasum":"d3385048fbfad0f8fe60c29f7da574920fb68f88","tarball":"http://registry.npmjs.org/ah-sdk-angular/-/ah-sdk-angular-0.0.8.tgz"}}
41 error new={"name":"ah-sdk-angular","description":"Tool for auto-generating Angular $resource services for Actionhero","version":"0.0.8","homepage":"https://github.com/jonthulu/ah-sdk-angular","main":"./lib/generator","engines":{"node":">=0.10.0"},"dependencies":{"lodash":"2.4.x","markup-js":"1.5.x"},"repository":{"type":"git","url":"https://github.com/jonthulu/ah-sdk-angular.git"},"readme":"# ah-sdk-angular\u000a\u000a> Tool for auto-generating Angular $http services for Actionhero\u000a\u000aThe services are generated based entirely on the actionhero routing. (See Generation Details below)\u000a\u000a## Getting Started\u000aThe included grunt task requires Grunt `~0.4.2`\u000a\u000a### Important!\u000aIt is required to update your settings under `config.servers.web.httpHeaders['Access-Control-Allow-Headers']`\u000ato include `Authorization`:\u000a```js\u000a  {\u000a    ...\u000a    'Access-Control-Allow-Headers': 'Content-Type,Authorization'\u000a  }\u000a```\u000a\u000aIt is recommended that you set `config.servers.web.simpleRouting` to `false` to avoid superfluous\u000aroute generation. It is not necessary though since methods are only generated from the routes config file.\u000a```js\u000a  {\u000a    ...\u000a    'simpleRouting': false,\u000a  }\u000a```\u000a\u000aBoth of these settings can be found in your actionhero/config/servers/web.js config file.\u000a\u000a### Install\u000aIf you haven't used [Grunt](http://gruntjs.com/) before,\u000abe sure to check out the [Getting Started](http://gruntjs.com/getting-started)\u000aguide, as it explains how to create\u000aa [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and\u000ause Grunt plugins. Once you're familiar with that process, you may install\u000athis plugin with this command:\u000a\u000a```shell\u000anpm install ah-sdk-angular --save-dev\u000a```\u000a\u000aOnce the plugin has been installed, it may be enabled inside your Gruntfile\u000awith these lines of JavaScript:\u000a\u000a```js\u000agrunt.loadNpmTasks('ah-sdk-angular');\u000agrunt.config('actionheroSDKAngular', {\u000a  options: {\u000a    output: 'DIRECTORY TO OUTPUT FILES'\u000a    // Add extra options here.\u000a  }\u000a});\u000a```\u000a\u000a## Tasks and configuration\u000a\u000aTo run the grunt task\u000a```shell\u000agrunt actionheroSDKAngular\u000a```\u000a\u000a### Options\u000aOptions available when generating the services file(s).\u000a\u000a#### output\u000aType: `string` *Required  \u000a\u000aThe path to the directory in which generate the file(s).\u000aIf serviceOutput is set, only the Angular module file will go here.\u000a\u000a#### serviceOutput\u000aType: `string|null` *Optional  \u000aDefault: `null`\u000a\u000aThe path to the directory in which to generate the Angular service/factory files.\u000aSkipped if singleFile is true.\u000a\u000a#### version\u000aType: `String` *Optional  \u000aDefault: `'latest'`\u000a\u000aThe action version to use (can be either 'latest' or a number like 1.0 or 2.3).\u000aIf the given version cannot be found, the latest version is used.\u000a\u000a#### singleFile\u000aType: `Boolean` *Optional  \u000aDefault: `false`\u000a\u000aIf true, will generate a single file instead of one for each model.\u000a\u000a#### wrap\u000aType: `Boolean` *Optional  \u000aDefault: `false`\u000a\u000aIf true, each file will be wrapped in a javascript function wrapper.\u000a```js\u000a(function(window, angular, undefined) {\u000a  // GENERATED CODE HERE\u000a})(window, window.angular);\u000a```\u000a\u000a#### modelPrepend\u000aType: `String` *Optional  \u000aDefault: `null`\u000a\u000aA string that is prepended to each angular model name. If this option is set, the actual model\u000awill be upperCamelCased instead of lowerCamelCased, though the overall name will still be lowerCamelCased.\u000aFor example: If set to 'sv', an 'auth' model will become 'svAuth' instead of 'auth'.\u000aThis option cannot be set to 'ah' as this would cause conflicts with the other SDK services.\u000a\u000a#### tokenPrepend\u000aType: `String` *Optional  \u000aDefault: `null`\u000a\u000aA string that is prepended to your access token before it is sent for authentication.  \u000aFor example, if you are using the `passport-http-bearer` package, you will need to set\u000athis to 'Bearer '.\u000a\u000a#### filter.whitelist\u000aType: `Array.<string>` *Optional  \u000aDefault: `[]`\u000a\u000aA list of keywords that must be defined in the `sdkKeywords` option of the actionTemplate in order\u000afor this action to be generated as a method in the model service.\u000aThe blacklist takes precedent over the whitelist.\u000a```js\u000a  filter: {\u000a    whitelist: ['admin']\u000a  }\u000a\u000a  // Will generate this action.\u000a  sdkKeywords: ['admin', 'expensive']\u000a\u000a  // Will not generate this action.\u000a  sdkKeywords: ['client']\u000a```\u000a\u000a#### filter.blacklist\u000aType: `Array.<string>` *Optional  \u000aDefault: `[]`\u000a\u000aA list of keywords that CAN NOT be defined in the `sdkKeywords` option of the actionTemplate in order\u000afor this action to be generated as a method in the model service.\u000aThe blacklist takes precedent over the whitelist.\u000a```js\u000a  filter: {\u000a    blacklist: ['admin']\u000a  }\u000a\u000a  // Will generate this action.\u000a  sdkKeywords: ['client', 'expensive']\u000a\u000a  // Will not generate this action.\u000a  sdkKeywords: ['client', 'admin']\u000a```\u000a\u000a#### moduleName\u000aType: `String` *Optional  \u000aDefault: `'ahServices'`\u000a\u000aThe name of the generated angular module.\u000a\u000a#### skipHttpGen\u000aType: `Boolean` *Optional  \u000aDefault: false\u000a\u000aIf true, the `ahHttp` factory service will not be generated but still be used. This allows (and requires)\u000athe user to write their own angular $http factory wrapper to suit their needs. This factory must return a\u000afunction that takes two config arguments and returns the results in whatever format you choose. The\u000afirst config argument is the generated $http config options, the second config argument are the\u000aoptional $http config options given by the user from the angular app.\u000a\u000a```js\u000a// Example of a custom ahHttp factory (same as the generated one).\u000aangular.module('myApp').factory('ahHttp', [ '$http', function ahHttpFactory($http) {\u000a    return function AHHttp(mainConfig, altConfig) {\u000a      if (!altConfig || typeof altConfig !== 'object') {\u000a        altConfig = {};\u000a      }\u000a      for (var i in mainConfig) {\u000a        if (mainConfig.hasOwnProperty(i)) {\u000a          altConfig[i] = mainConfig[i];\u000a        }\u000a      }\u000a\u000a      return $http(altConfig).then(function (response) {\u000a        return response.data;\u000a      });\u000a    };\u000a  }]);\u000a```\u000a\u000a### Sending options to Grunt\u000aOptions format when calling grunt is `:output:version:singleFile:wrap`.\u000a```shell\u000agrunt actionheroSDKAngular:/tmp:1.0:true:true\u000a```\u000aNote: These will override the options defined in the grunt config.\u000a\u000a## Generation Details\u000a\u000aThe tool scans the routes file and uses the paths to define models.\u000aThese models are defined using the first directory from the URL `path` param or a defined `sdkModel` param for each route.\u000aThe actions/methods defined for each model is taken from the second directory from the `path` param or a defined `sdkName` param.\u000aYou can also provide an optional `sdkRoute` param that mimics the `path` param but will be used instead of `path` (`sdkName` and `sdkModel` will still override this.)\u000a\u000aExample config/routes.js file:\u000a```js\u000a{\u000a  get:  [\u000a    // Auth Routes\u000a    { path: '/auth/logout', action: 'authLogout', sdkName: 'logout' },\u000a\u000a    // User Routes\u000a    { path: '/users/getPrivateData/:id', action: 'userGetPrivateData' }\u000a  ],\u000a  post: [\u000a    // Auth Routes\u000a    { path: '/auth/login', action: 'authLogin', sdkName: 'login', sdkModel: 'auth' },\u000a\u000a    // User Routes\u000a    { path: '/users', action: 'userCreate', sdkName: 'create' }\u000a  ]\u000a}\u000a```\u000aIn this example, 2 models will be created: Auth and Users.\u000aThe Auth model will contain a login and logout method.\u000aThe User model will contain a create and getPrivateData method.\u000a\u000aNote that the http verbs are preserved in the $http calls, so Auth.login will do a POST call and Auth.logout will do a GET call.\u000aAny routes under the `all` verb will be ignored when generating the sdk.\u000a\u000a(Note: If no `sdkName` is given and no second folder exists, such as with the userCreate action above,\u000athen a name will be generated based on the verb. Get=>find, post=>create, put=>update, delete=>delete, patch=>patch.)\u000a\u000aThe parameters for the generated methods will come from the actionhero action file's inputs.required and inputs.optional settings.\u000a```js\u000a// If the authLogin action is defined as such.\u000aexports.authLogin = {\u000a  inputs: {\u000a    'required': ['email', 'password'],\u000a    'optional': ['ttl']\u000a  }\u000a  ...\u000a};\u000a\u000a// A function declaration such as this is generated.\u000afunction login(email, password, ttl) {\u000a  ...\u000a}\u000a```\u000a\u000aThese parameters can be given to the method as individual arguments or by sending an object as the first argument.\u000aIf the actionTemplate has the `sdkSingleParam` option set to true, then only the second example will be available.\u000a```js\u000aAuth.login(email, password);\u000aAuth.login({'email': email, 'password': password);\u000a```\u000a\u000aEach function does a $http call and returns a simple `promise` with the returned data (the normal header and other info is stripped).\u000a```js\u000aAuth.login(email, password).then(function (data) {}, function (err) {});\u000a```\u000a\u000aA bonus method `getUrls` is generated for each model that returns an object with the url for each\u000aaction. Be aware of any :params in each url that may need to be replaced. You can use `ahRouteHelper.parseRoute`\u000ato fill in these params if you like.\u000a```js\u000aangular.module('myApp').controller('userController', ['Users', 'ahRouteHelper', function (Users, ahRouteHelper) {\u000a  var url = Users.getUrls().getPrivateData;            // Returns '/users/getPrivateData/:id'.\u000a  ahRouteHelper.parseRoute(url, {id: 32}).url; // Returns '/users/getPrivateData/32'.\u000a}\u000a```\u000a\u000a### Routes config options\u000a\u000aThese are options that can be set in the route definitions in your actionhero routes config file (actionhero/config/routes.js).\u000a\u000a#### sdkModel\u000aType: `string` *Optional  \u000aDefault: Parsed from the `path` or `sdkPath` param (/sdkModel/sdkName/other/routing/:id).\u000a\u000aThe model name to use when generating a service for this route.\u000a```js\u000a{ path: '/anything/login', action: 'authLogin', sdkName: 'login', sdkModel: 'auth' }\u000a// Generates an Auth model.\u000a```\u000a\u000a#### sdkName\u000aType: `string` *Optional  \u000aDefault: Parsed from the `path` or `sdkPath` param (/sdkModel/sdkName/other/routing/:id).\u000a\u000aThe name to use when generating a method for this route.\u000a```js\u000a{ path: '/auth/anything/:id', action: 'authLogin', sdkName: 'login', sdkModel: 'auth' }\u000a// Generates an Auth.login method.\u000a```\u000a\u000a#### sdkRoute\u000aType: `string` *Optional  \u000aDefault: `null`\u000a\u000aOverrides the `path` param when parsing the model and action names.\u000aThe `sdkModel` and `sdkName` options override anything parsed from this option.\u000a```js\u000a{ path: '/something/anything/:id', action: 'authLogin', sdkRoute: '/auth/login' }\u000a// Generates an Auth.login method.\u000a```\u000a\u000a#### sdkKeywords\u000aType: `Array.<string>` *Optional  \u000aDefault: `null`\u000a\u000aAdds a keyword to this specific route instead of the action. This can be used to filter routes to\u000aan action based on the routing parameters.\u000a```js\u000a{ path: '/something/anything', action: 'createSomething' }\u000a{ path: '/something/anything/:adminParam', action: 'createSomething', sdkKeywords: ['admin'] }\u000a// Here is an example where the admin sdk will take a param for an action but the non-admin wont\u000a// for the same action.\u000a```\u000a\u000a### ActionTemplate options\u000a\u000aThese are options that can be set in the action template when you are defining your actionhero actions.\u000a\u000a#### sdkKeywords\u000aType: `{Array.<string>}` *Optional  \u000aDefault: `null`\u000a\u000aA list of keywords that can help define the action. These can be used to filter types of actions\u000awhen generating the services.\u000a\u000a#### sdkSingleParam\u000aType: `boolean` *Optional  \u000aDefault: `false`\u000a\u000aIf true, the `inputs.required` and `inputs.optional` params will not be listed out as arguments of the method.\u000aInstead, only a single param will be available that accepts the key/value object of params.\u000a\u000a#### sdkClearCacheMethod\u000aType: `boolean` *Optional  \u000aDefault: `true` for get methods, `false` otherwise.\u000a\u000aGenerates a clear cache method for this action if true.\u000a\u000a## Using the generated services\u000a\u000a* Add the ahServices.js file (and any other generated files) to your Angular App.\u000a```html\u000a<script src=\"scripts/ahServices.js\"></script>\u000a(other generated files here)\u000a```\u000a* Add ahServices as a dependency of your module.\u000a```js\u000aangular.module('myApp', [\u000a  ...\u000a  'ahServices'\u000a]);\u000a```\u000a\u000a* Simply inject your new models into anywhere you need them.\u000a```js\u000aangular.module('myApp').controller('authController', ['Auth', 'ahAuth', function (Auth, ahAuth) {\u000a  $scope.login = function () {\u000a    Auth.login({'email': email, 'password': password}).then(function loginSuccess(user) {\u000a      ahAuth.login(user.token, user.id, $scope.rememberMe);\u000a      console.log('Login Success', user);\u000a    }, function loginError(err) {\u000a      console.log('Login Error', err);\u000a    });\u000a  };\u000a}]);\u000a```\u000a\u000a* Use the ahAuth service to track Authentication. When provided an access token and user id, all subsequent\u000a$http calls will have the Authentication header automatically set to your user access token.\u000a```\u000aangular.module('myApp').controller('testController', ['ahAuth', 'Users', function (ahAuth, Users) {\u000a  var someToken  = '1234';\u000a  var someUserId = 1;\u000a  // This would have happened in the login, not in the same controller...\u000a  ahAuth.login(someToken, someUserId, true);\u000a\u000a  // We better have 'id' in our inputs.required in the userGetPrivateData action.\u000a  Users.getPrivateData({id: ahAuth.getUserId()}).then(function (myPrivateData) {\u000a    console.log(myPrivateData);\u000a  });\u000a\u000a  // This will do a $http GET call to '/users/getPrivateData/1' with 'Authentication: 1234' in the headers.\u000a}]);\u000a```\u000a\u000aNote: You will have to generate your own accessTokens, I use the uid2 package available through npm.\u000a```shell\u000anpm install uid2 --save\u000a```\u000a\u000a* When you logout the user, call ahAuth.logout() to clear the current session.\u000a```js\u000aAuth.logout(function logoutSuccess() {\u000a  ahAuth.logout();\u000a});\u000a```\u000a\u000a* To override the angular $http config options when calling the SDK, send the first argument as\u000aan object of parameters and the second argument as an object of config options. Note that any\u000aoptions that are explicitly set by the SDK call (method, url, etc) cannot be overridden.\u000a```js\u000aUsers.getPrivateData({\u000a  id: 1\u000a}, {\u000a  cache: true\u000a}).then(...);\u000a```\u000a\u000a* To override the angular $http config defaults for all SDK calls, use angular.module(...).run() or .config().\u000a```js\u000aangular.module('myApp').config(['$httpProvider', function ($httpProvider) {\u000a  $httpProvider.defaults.xsrfCookieName  = 'ahXSRF';\u000a  $httpProvider.defaults.withCredentials = true;\u000a}]);\u000a/* OR */\u000aangular.module('myApp').run(['$http', function ($http) {\u000a  $http.defaults.xsrfCookieName  = 'ahXSRF';\u000a  $http.defaults.withCredentials = true;\u000a}]);\u000a```\u000a\u000a* Check the docblocks in the generated code for more help if you need it.\u000a","readmeFilename":"README.md","gitHead":"74fb3d108016b167117da691d2d29f9b7130f11f","bugs":{"url":"https://github.com/jonthulu/ah-sdk-angular/issues"},"_id":"ah-sdk-angular@0.0.8","scripts":{},"_shasum":"b2391debd94575be803a1e8005adca66c9eb9a7a","_from":".","_npmVersion":"2.1.7","_nodeVersion":"0.10.31","_npmUser":{"name":"jonthulu","email":"epoque@cox.net"},"maintainers":[{"name":"jonthulu","email":"epoque@cox.net"}],"dist":{"shasum":"b2391debd94575be803a1e8005adca66c9eb9a7a","tarball":"http://registry.npmjs.org/ah-sdk-angular/-/ah-sdk-angular-0.0.8.tgz"}}: ah-sdk-angular
42 error If you need help, you may report this error at:
42 error     <http://github.com/npm/npm/issues>
43 verbose exit [ 1, true ]
